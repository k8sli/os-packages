---
name: Build os-packages image
on:
  push:
    tag:
      - 'v*'
    branch: [main, release-*, master]
  workflow_dispatch:
env:
  IMAGE_REGISTRY: "ghcr.io"
  REGISTRY_USER: "${{ github.repository_owner }}"
  REGISTRY_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  IMAGE_REPO: "ghcr.io/${{ github.repository_owner }}"

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - os_name: ubuntu-bionic
            image_name: os-packages-ubuntu18
            dockerfile: build/Dockerfile.os.ubuntu18
          - os_name: ubuntu-focal
            image_name: os-packages-ubuntu20
            dockerfile: build/Dockerfile.os.ubuntu20
          - os_name: centos-7
            image_name: os-packages-centos7
            dockerfile: build/Dockerfile.os.centos7
          - os_name: centos-8
            image_name: os-packages-centos8
            dockerfile: build/Dockerfile.os.centos8
          - os_name: debian-buster
            image_name: os-packages-debian10
            dockerfile: build/Dockerfile.os.debian10
          - os_name: debian-stretch
            image_name: os-packages-debian9
            dockerfile: build/Dockerfile.os.debian9
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # fetch all git repo tag for define image tag
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_TOKEN }}

      - name: Prepare for build images
        shell: bash
        run: |
          git describe --tags --always | sed 's/^/IMAGE_TAG=/' >> $GITHUB_ENV

      - name: Build and push os-package images
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.IMAGE_REPO }}/${{ matrix.image_name }}:${{ env.IMAGE_TAG }}

      - name: Gen new Dockerfile
        shell: bash
        run: |
          echo -e "FROM scratch\nCOPY --from=${{ env.IMAGE_REPO }}/${{ matrix.image_name }}:${{ env.IMAGE_TAG }} / /" > Dockerfile

      - name: Build kubeplay image to local
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          outputs: type=local,dest=./

      - name: Prepare for upload package
        shell: bash
        run: |
          mv linux_amd64 resources
          tar -I pigz -cf resources-${{ matrix.image_name }}-${IMAGE_TAG}-amd64.tar.gz resources --remove-files
          mv linux_arm64 resources
          tar -I pigz -cf resources-${{ matrix.image_name }}-${IMAGE_TAG}-arm64.tar.gz resources --remove-files
          sha256sum resources-${{ matrix.image_name }}-${IMAGE_TAG}-{amd64,arm64}.tar.gz > resources-${{ matrix.image_name }}-${IMAGE_TAG}.sha256sum.txt

      - name: Release and upload packages
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            resources-${{ matrix.image_name }}-${{ env.IMAGE_TAG }}.sha256sum.txt
            resources-${{ matrix.image_name }}-${{ env.IMAGE_TAG }}-amd64.tar.gz
            resources-${{ matrix.image_name }}-${{ env.IMAGE_TAG }}-arm64.tar.gz

  upload:
    needs: [build]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # fetch all git repo tag for define image tag
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_TOKEN }}

      - name: Prepare for build images
        shell: bash
        run: |
          git describe --tags --always | sed 's/^/IMAGE_TAG=/' >> $GITHUB_ENV
          source $GITHUB_ENV
          echo "FROM scratch" > Dockerfile
          echo "COPY --from=${{ env.IMAGE_REPO }}/os-packages-ubuntu18:${IMAGE_TAG} / /" >> Dockerfile
          echo "COPY --from=${{ env.IMAGE_REPO }}/os-packages-ubuntu20:${IMAGE_TAG} / /" >> Dockerfile
          echo "COPY --from=${{ env.IMAGE_REPO }}/os-packages-centos7:${IMAGE_TAG} / /" >> Dockerfile
          echo "COPY --from=${{ env.IMAGE_REPO }}/os-packages-centos8:${IMAGE_TAG} / /" >> Dockerfile
          echo "COPY --from=${{ env.IMAGE_REPO }}/os-packages-debian9:${IMAGE_TAG} / /" >> Dockerfile
          echo "COPY --from=${{ env.IMAGE_REPO }}/os-packages-debian10:${IMAGE_TAG} / /" >> Dockerfile

      - name: Build kubeplay image to local
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          outputs: type=local,dest=./

      - name: Prepare for upload package
        shell: bash
        run: |
          mv linux_amd64/resources resources
          tar -I pigz -cf resources-all-${IMAGE_TAG}-amd64.tar.gz resources --remove-files
          mv linux_arm64/resources resources
          tar -I pigz -cf resources-all-${IMAGE_TAG}-arm64.tar.gz resources --remove-files
          sha256sum resources-all-${IMAGE_TAG}-{amd64,arm64}.tar.gz > resources-all-${IMAGE_TAG}.sha256sum.txt

      - name: Release and upload packages
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            resources-all-${{ env.IMAGE_TAG }}.sha256sum.txt
            resources-all-${{ env.IMAGE_TAG }}-amd64.tar.gz
            resources-all-${{ env.IMAGE_TAG }}-arm64.tar.gz
